Course,Description,Prerequisites,Median Grade,Student Review
EECS 183,"Fundamental concepts and skills of programming in a high-level language. Flow of control: selection, iteration, subprograms. Data structures: strings, arrays, records, lists, tables. Algorithms using selection and iteration (decision making, finding maxima/minima, searching, sorting, simulation, etc.) Good program design, structure and style are emphasized. Testing and debugging. Not intended for Engineering students (who should take ENGR 101), nor for CS majors in LSA who qualify to enter EECS 280.",None,A-,"Sorry, we do not have a student review for this class yet."
EECS 203,"Introduction to the mathematical foundations of computer science. Topics covered include: propositional and predicate logic, set theory, function and relations, growth of functions and asymptotic notation, introduction to algorithms, elementary combinatorics and graph theory and discrete probability theory.",MATH 115 or 116 or 119 or 120 or 121 or 156 or 175 or 176 or 185 or 186 or 214 or 215 or 216 or 217 or 255 or 256 or 285 or 286 or 295 or 296 or 417 or 419,B,This class is more theory based and does not do any coding. I took it with EECS280 and it paired nicely. 
EECS 280,"Algorithm development and effective programming, top-down analysis, structured programming, testing and program correctness. Program language syntax and static and runtime semantics. Scope, procedure instantiation, recursion, abstract data types and parameter passing methods. Structured data types, pointers, linked data structures, stacks, queues, arrays, records and trees",ENGR 101 or ENGR 151 or EECS 180 or EECS 183,B+,280 is a step above 183 or 101/151. I enjoyed working in pairs for the coding projects and itÕs a medium workload (start projects early.)
EECS 281,"Introduction to algorithm analysis and O-notation; Fundamental data structures including lists, stacks, queues, priority queues, hash tables, binary trees, search trees, balanced trees and graphs; searching and sorting algorithms; recursive algorithms; basic graph algorithms; introduction to greedy algorithms and divide and conquer strategy. Several programming assignments.",(EECS 203 or Math 465 or Math 565) and EECS 280,B,"This class will definitely consume a lot of your time, but you'll gain way more skills than you have in all previous eecs classes combined."
EECS 285,"Introduction to Java programming, including language features, design principles, and programming practices. Topics include: Java syntax and semantics, object-oriented design, exception handling, graphical user interfaces, mobile-application development, asynchronous programming, and unit testing.",EECS 280,A,"Sorry, we do not have a student review for this class yet."
EECS 370,"Basic concepts of computer organization and hardware. Instructions executed by a processor and how to use these instructions in simple assembly-language programs. Stored-program concept. Datapath and control for multiple implementations of a processor. Performance evaluation, pipelining, caches, virtual memory, input/output.",(EECS 203 or Math 465 or Math 565 or EECS 270) and EECS 280,B,More interesting for people who care about hardware. I'd say its about a 280 workload but less interesting if you ask me.
EECS 373,"Principles of designing application-specific computer systems that interact with the physical world. Covers memory-mapped I/O, interrupts, analog interfacing, microprocessors, reconfigurable hardware, sensors, and actuators. Complex hardware/software system design and implementation. Substantial student-defined team design project.",EECS 270 and EECS 370 and junior standing or higher,B+,"Sorry, we do not have a student review for this class yet."
EECS 376,"Introduction to theory of computation. Â Models of computation: finite state machines, Turing machines. Â Decidable and undecidable problems. Â Polynomial time computability and paradigms of algorithm design. Â computational complexity emphasizing NP-hardness. Â Coping with intractability. Â Exploiting intractability: Â cryptography.",EECS 280 and (EECS 203 or Math 465 or Math 565),B,"Sorry, we do not have a student review for this class yet."
EECS 381,"Programming techniques in Standard C++ for large-scale, complex, or high-performance software. Encapsulation, automatic memory management, exceptions, generic programming with templates and function objects, Standard Library algorithms and containers. Â Using single and multiple inheritance and polymorphism for code reuse and extensibility; basic design idioms, patterns, and notation.",EECS 281 and EECS 370,B-,"Sorry, we do not have a student review for this class yet."
EECS 388,"This course introduces the principles and practices of computer security as applied to software, host systems, and networks. It covers the foundations of building, using and managing secure systems. Topics include standard cryptographic functions and protocols, threats and defenses for real-world systems, incident response and computer forensics. There will be homework exercises, programming projects and a final exam.",Enforced: EECS 281. Advisory: EECS 370.,B+,Gives some useful info about security but the class is usually run poorly. Also more work than it was a couple years back.
EECS 441,"Best practices in the software engineering of mobile applications and best practices of software entrepreneurs in the design, production and marketing of mobile apps. Students will engage in the hands-on practice of entrepreneurship by actually inventing, building and marketing their own mobile apps.","Senior standing, EECS 281, and at least four credit hours of Upper Level Electives from list in either Computer Science or Computer Engineering",A,"Sorry, we do not have a student review for this class yet."
EECS 442,"This course is an introduction to 2D and 3D computer vision. topics include: cameras models, the geometry of multiple views; shape reconstruction methods from visual cues: stereo, shading, shadow, contours; low-level image processing methodologies such as edge detection, feature detection; mid-level vision techniques (segmentation and clustering); Basic high-level vision problems: face detection, object and scene recognition, object categorization, and human tracking.",EECS 281 or graduate standing,A,"Sorry, we do not have a student review for this class yet."
EECS 445,"Theory and implementation of state-of-the-art machine learning algorithms for large-scale real-world applications. Topics include supervised learning (regression, classification, kernel methods, neural networks, and regularization) and unsupervised learning (clustering, density estimation, and dimensionality reduction).",EECS 281 and (MATH 214 or MATH 217 or MATH 296 or MATH 417),B+,"Sorry, we do not have a student review for this class yet."
EECS 467,"Software methods and implementation for robot perception, world mapping, and control, using physical robots. Topics include: sensors, sensor processing, control, motion planning, localization and mapping, and forward and inverse kinematics. Multiple team projects, culminating in a major design experience (MDE) project.",EECS 281 and (MATH 214 or 217 or 296 or 417 or 419) and (EECS 367 or EECS 373),A,"Sorry, we do not have a student review for this class yet."
EECS 470,"Topics include out-of-order processors and speculation, memory hierarchies, branch prediction, virtual memory, cache design, multi-processors, and parallel processing including cache coherence and consistency. Emphasis on power and performance trade-offs. Groups design an advanced (e.g. out-of-order, multi-core, SMT) processor using an HDL.",EECS 370 and EECS 270 or graduate standing,A-,"Sorry, we do not have a student review for this class yet."
EECS 473,Design of hardware and software for modern embedded systems. Real-time operating systems. Device drivers for general operating systems. PCB design including power integrity and electromagnetic interference. Radio frequency and wireless communication. Low-power design. DC/DC converter design for PCBs. Rapid prototyping of embedded systems. Groups will design a complete embedded system.,EECS 373 and EECS 215 or EECS 281 or graduate standing,B+,"Sorry, we do not have a student review for this class yet."
EECS 477,"Fundamental techniques for designing efficient algorithms and basic mathematical methods for analyzing their performance. Paradigms for algorithm design: divide-and-conquer, greedy methods, graph search techniques, dynamic programming. Design of efficient data structures and analysis of the running time and space requirements of algorithms in the worst and average cases.",EECS 281 Â and EECS 376,B+,"Sorry, we do not have a student review for this class yet."
EECS 481,"Pragmatic aspects of the production of software systems, dealing with structuring principles, design methodologies and informal analysis. Emphasis is given to development of large, complex software systems. A term project is usually required.",EECS 281 or graduate standing,A-,Great class that will teach you a lot about industrial software concepts. Wes Weimer is a super engaging professor if you can take it with him. 
EECS 482,"Operating system design and implementation: multi-tasking; concurrency and synchronization; inter-process communication; deadlock; scheduling; resource allocation; memory and storage management; input-output; file systems; protection and security. Students write several substantial programs dealing with concurrency and synchronization in a multi-task environment, with file systems and with memory management.",EECS 281 and EECS 370 or graduate standing in CSE,B+,Extremely time consuming class. I spent 40+ hours per week on the projects for the 6 credit version.
EECS 483,"Introduction to compiler construction. Topics covered will include the following: lexical scanning, parsing (top-down and bottom-up), abstract syntax trees, semantic analysis, code generation and optimization. Students will build a working compiler for a high-level programming language.",EECS 281 and EECS 370 or graduate standing,A-,"Sorry, we do not have a student review for this class yet."
EECS 484,"Concepts and methods for the design, creation, query and management of large enterprise databases. Functions and characteristics of the leading database management systems. Query languages such as SQL, forms, embedded SQL, and application development tools. Database design, integrity, normalization, access methods, query optimization, transaction management and concurrency control and recovery.",EECS 281 (minimum grade of âCâ) or EECS 403 (minimum grade of âBâ) or graduate standing in CSE.,B,Dreadfully boring lectures but useful knowledge if you'll be working on any databases in your career. Includes SQL and some mongoDB stuff.
EECS 485,"Concepts surrounding web systems, applications, and internet scale distributed systems. Topics covered include client/server protocols, security, information retrieval and search engines, scalable data processing, and fault tolerant systems. The course has substantial projects involving development of web applications and web systems.",EECS 281 or graduate standing in CSE,B+,Very useful class for all web related careers. Can be easier for some than others if you have prior web development knowledge.
EECS 486,"Covers background and recent advances in information retrieval (IR): indexing, processing, querying, classifying data. Â Basic retrieval models, algorithms, and IR system implementations. Focuses on textual data, but also looks at images/videos, music/audio, and geospatial information. Web search, including Web crawling, link analysis, search engine development, social media, and crowdsourcing.",EECS 281,A-,"Sorry, we do not have a student review for this class yet."
EECS 487,"Computer graphics hardware, line drawing, rasterization, anti-aliasing, graphical user interface (GUI), affine geometry, projective geometry, geometric transformation, polygons, curves, splines, solid models, lighting and shading, image rendering, ray tracing, radiosity, hidden surface removal, texture mapping, animation, virtual reality and scientific visualization.",EECS 281 or graduate standing,B+,"Sorry, we do not have a student review for this class yet."
EECS 489,"Protocols and architectures of computer networks. Topics include client-server computing, socket programming, naming and addressing, media access protocols, routing and transport protocols, flow and congestion control, and other application-specific protocols. Emphasis is placed on understanding protocol design principles. Programming problems to explore design choices and actual implementation issues assigned.",EECS 482 or graduate standing in CSE,A-,"Sorry, we do not have a student review for this class yet."
EECS 490,"Fundamental concepts in programming languages. Course covers different programming languages including functional, imperative, object-oriented, and logic programming languages; different programming language features for naming, control flow, memory management, concurrency, and modularity; as well as methodologies, techniques and tools for writing correct and maintainable programs.",EECS 281,A-,"Sorry, we do not have a student review for this class yet."
EECS 492,"Introduction to the core concepts of AI, organized around building computational agents. Emphasizes the application of AI techniques. Â Topics include search, logic, knowledge representation, reasoning, planning, decision making under uncertainty, and machine learning.",EECS 281,B+,"Sorry, we do not have a student review for this class yet."
EECS 493,"Concepts and techniques for designing computer system user interfaces to be easy to learn and use, with an introduction to their implementation. Task analysis, design of functionality, display and interaction design, and usability evaluation. Interface programming using an object-oriented application framework. Fluency in a standard object-oriented programming language is assumed.",EECS 281 or graduate standing in CSE,A-,"Sorry, we do not have a student review for this class yet."
EECS 494,"Concepts and methods for the design and development of computer games. Topics include: history of games, 2D graphics and animation, sprites, 3D animation, binary space partition trees, software engineering, game design, interactive fiction, user interfaces, artificial intelligence, game SDKâs, networking, multi-player games, game development environments, commercialization of software.",EECS 281,A,"Sorry, we do not have a student review for this class yet."
EECS 495,"Emphasizes team-based development of large, complex, software systems using established software development methodology. Systems will incorporate state-of-the-art technology dealing with disability, illness, and accessibility. Real world projects, usually in partnership with hospitals for for specific disabled clients.",EECS 281 or Graduate Standing in CSE,A-,"Sorry, we do not have a student review for this class yet."
EECS 496,"Design principles for multidisciplinary team projects, team strategies, entrepreneurial skills, ethics, social and environmental awareness, and life long learning. Each student must take (simultaneously) Tech Comm 496 (2 cr.) and one of the approved 400-level team project courses in computing (4 cr.).",senior standing,A,"Sorry, we do not have a student review for this class yet."
EECS 497,"Professional problem-solving methods developed through intensive group studies. Normally one significant design project is chosen for entire class requiring multiple EECS disciplines and teams. Use of analytic, computer, design, and experimental techniques where applicable are used. Projects are often interdisciplinary allowing non-EECS seniors to also take the course (consult with instructor).",EECS 281,A,"Sorry, we do not have a student review for this class yet."